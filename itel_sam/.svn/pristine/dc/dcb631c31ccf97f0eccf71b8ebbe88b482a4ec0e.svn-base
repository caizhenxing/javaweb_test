package com.itel.service.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import oracle.net.aso.g;

import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import cn.jpush.api.push.model.Message;
import cn.jpush.api.push.model.Platform;
import cn.jpush.api.push.model.PushPayload;
import cn.jpush.api.push.model.audience.Audience;
import cn.jpush.api.push.model.notification.Notification;

import com.itel.dao.ISamPushDao;
import com.itel.data.GridResult;
import com.itel.domain.PushMessage;
import com.itel.domain.SamPush;
import com.itel.service.ISamPushService;
import com.itel.tools.JPushUtils;
import com.itel.utils.Constants;

@Service
public class ISamPushServiceImpl implements ISamPushService {
	@Autowired
	private ISamPushDao iSamPushDao;
	@Autowired
	private JPushUtils jPushUtils;

	@Override
	public GridResult saveSamPush(SamPush samPush) {
		GridResult gridResult = new GridResult();
		samPush.setUid(UUID.randomUUID().toString());
		try {
			this.iSamPushDao.saveSamPush(samPush);
			gridResult.setSuccess(true);
		} catch (Exception e) {
			gridResult.setSuccess(false);
			gridResult.setMsg("对不起,系统异常");
		}
		return gridResult;
	}

	@Override
	public GridResult push(PushMessage pushMessage) {
		GridResult gridResult = new GridResult();
		PushPayload.Builder p = PushPayload.newBuilder();
		String msg = "";
		try {
			msg = parasMessage(pushMessage.getTitle(), pushMessage.getContent(),pushMessage.getMsgType());
		} catch (JSONException e) {
			gridResult.setSuccess(false);
			gridResult.setMsg("解析内容异常");
		}
		
		//设备平台处理 start
		String platForm = pushMessage.getPlatForm();
		if(Constants.PUSH_AllPlatForm.equals(platForm)){
			p.setPlatform(Platform.all());
		}else if(Constants.PUSH_AndroidPlatForm.equals(platForm)){
			p.setPlatform(Platform.android());
		}else if(Constants.PUSH_IOSPlatForm.equals(platForm)){
			p.setPlatform(Platform.ios());
		}
		//设备平台处理 end
		
		//发送对象处理 start
		String target = pushMessage.getTarget();
		if(Constants.PUSH_Target_All.equals(target)){
			p.setAudience(Audience.all());
		}else if(Constants.PUSH_Target_Alias.equals(target)){
			p.setAudience(Audience.alias(pushMessage.getUitel()));
		}else if(Constants.PUSH_Target_Registration.equals(target)){
			p.setAudience(Audience.registrationId(pushMessage.getChannel()));
		}
		//发送对象处理 end
		
		//消息类型处理 start
		String type = pushMessage.getType();
		if (Constants.PUSH_Notification.equals(type)) {
			Notification notification = Notification.alert(msg);
			p.setNotification(notification);
		} else if (Constants.PUSH_Message.equals(type)) {
			Message message = Message.content(msg);
			p.setMessage(message);
		}
		//消息类型处理 end
		
		PushPayload pushPayload = p.build();
		jPushUtils.sendMsg(pushPayload);
		return gridResult;

	}
	
	/**
	 * 发送给所有设备
	 * @param msg
	 */
	public void sendAll(String msg) {
		jPushUtils.sendMessageByAll(msg);
	}
	/**
	 * 标题,内容组装json方法
	 * @param title
	 * @param content
	 * @return
	 * @throws JSONException
	 */
	public String parasMessage(String title, String content,String msgtype)
			throws JSONException {
		JSONObject json = new JSONObject();
		if (title != null) {
			json.put("title", title);
		}
		if (content != null) {
			json.put("content", content);
		}
		if (msgtype != null) {
			json.put("msgtype", msgtype);
		}
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String date = simpleDateFormat.format(new Date());
		json.put("date", date);
		return json.toString();
	}
	
	public static void main(String[] args) throws JSONException{
		ISamPushServiceImpl impl = new ISamPushServiceImpl();
		System.out.println(impl.parasMessage("asdasd", "dasdas", "asdas"));
	}

}
